// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SwfIdentityContext))]
    [Migration("20220119184400_UpdateDB")]
    partial class UpdateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0748e56b-f084-43d0-95df-e2387b0b5ac3",
                            ConcurrencyStamp = "5997c33b-8df3-4c80-bb4a-2a3d093ead51",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "ebac858e-ca4d-487f-8687-bd14f185b48f",
                            ConcurrencyStamp = "46714472-55d7-4ba1-b654-60be0c30f9b1",
                            Name = "Therapist",
                            NormalizedName = "THERAPIST"
                        },
                        new
                        {
                            Id = "9a95fa39-7f16-4487-86d8-ae1e16b1b935",
                            ConcurrencyStamp = "e7b8b64b-749c-4aa8-8c06-0c337aa5518c",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "098a88a1-47b8-4c68-a1d9-869f3813f03c",
                            ConcurrencyStamp = "163959ec-0b8c-419d-a7c2-15d589aa0f91",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "620ba96f-15fb-4a48-994e-af6aa7258218",
                            RoleId = "ebac858e-ca4d-487f-8687-bd14f185b48f"
                        },
                        new
                        {
                            UserId = "fbed071c-76c4-4d5c-8435-4b61cc42c8f7",
                            RoleId = "ebac858e-ca4d-487f-8687-bd14f185b48f"
                        },
                        new
                        {
                            UserId = "628ee35c-a396-457b-8a74-e75d8f96c73e",
                            RoleId = "ebac858e-ca4d-487f-8687-bd14f185b48f"
                        },
                        new
                        {
                            UserId = "f577b715-1611-4b73-b98e-c7940f3f763b",
                            RoleId = "9a95fa39-7f16-4487-86d8-ae1e16b1b935"
                        },
                        new
                        {
                            UserId = "63858e13-f11a-4f98-a63a-9d5d7e77ac36",
                            RoleId = "098a88a1-47b8-4c68-a1d9-869f3813f03c"
                        },
                        new
                        {
                            UserId = "ec85f013-c18b-4472-b358-9c94d21fcb18",
                            RoleId = "098a88a1-47b8-4c68-a1d9-869f3813f03c"
                        },
                        new
                        {
                            UserId = "088063e3-dd7a-4e19-b67b-ec910b3f8e3f",
                            RoleId = "098a88a1-47b8-4c68-a1d9-869f3813f03c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Domain.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("DataId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "620ba96f-15fb-4a48-994e-af6aa7258218",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6a05d9d-4dad-4020-80b1-8974fb31f582",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "THERAPIST01",
                            PasswordHash = "AQAAAAEAACcQAAAAEKuQglGfpdjUKHYgAArtvcEmqBqAneNhuSMBm57OOCKAmk1UxrJy3xrMiXxImvBUdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b70f9e58-253e-4dbb-a731-d9768534ebfb",
                            TwoFactorEnabled = false,
                            UserName = "Therapist01",
                            DataId = 1
                        },
                        new
                        {
                            Id = "fbed071c-76c4-4d5c-8435-4b61cc42c8f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b82ba2d-0ed1-4b29-b673-4dc6a3914dbb",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "THERAPIST02",
                            PasswordHash = "AQAAAAEAACcQAAAAEHPEdOkAGqhDuit1Aa2dVN0BNVNhI6yV0BuO4vp7oJ+hhmtoRsOvqANAVUVkG3qaUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1285c54-6835-4030-96bd-1db19bb2ae9b",
                            TwoFactorEnabled = false,
                            UserName = "Therapist02",
                            DataId = 2
                        },
                        new
                        {
                            Id = "628ee35c-a396-457b-8a74-e75d8f96c73e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edc7e1bb-3078-4816-b588-0a9ba3e2c00f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "THERAPIST03",
                            PasswordHash = "AQAAAAEAACcQAAAAEDpp6crIVviV1jt+47TtXF2lOYQ4rXXAkB4Lj7ZiqctL30SHvrw8zyLS9Mahba3l2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1215fc8-809e-4b50-9683-3c335744dae8",
                            TwoFactorEnabled = false,
                            UserName = "Therapist03",
                            DataId = 3
                        },
                        new
                        {
                            Id = "f577b715-1611-4b73-b98e-c7940f3f763b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7742122-8b29-4944-9ee5-56cad093ab87",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "STUDENT01",
                            PasswordHash = "AQAAAAEAACcQAAAAEDp1EC8lYv7X3vQNCDMlHiUoR9uSoDSIGDYlweCGyoo2OVj/dhiA3IvIteElvLzLsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b53294d-2a14-43f8-80ac-f93f864734ba",
                            TwoFactorEnabled = false,
                            UserName = "Student01",
                            DataId = 4
                        },
                        new
                        {
                            Id = "63858e13-f11a-4f98-a63a-9d5d7e77ac36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a6b9a92-88ca-4453-b569-cae4b79210c1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PATIENT01",
                            PasswordHash = "AQAAAAEAACcQAAAAEFFWZuNxMR2cmgTm2Htjzv/bYCJOM89GyOEzfJM3teHw3uBYdkhcISrrrEG94g2YXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64b963a8-af34-4404-a3d4-e3298db600f4",
                            TwoFactorEnabled = false,
                            UserName = "Patient01",
                            DataId = 1
                        },
                        new
                        {
                            Id = "ec85f013-c18b-4472-b358-9c94d21fcb18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8518dfd8-2c55-4052-9267-8ae0cf13a884",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PATIENT02",
                            PasswordHash = "AQAAAAEAACcQAAAAEImQ5BlYY/RE6cGu0jSS51mSTYYFfswEgSCKwPaMU1i7UYUYnX0z64k6eljRh1Bj+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7348367c-753d-47cf-a900-8540002f2586",
                            TwoFactorEnabled = false,
                            UserName = "Patient02",
                            DataId = 2
                        },
                        new
                        {
                            Id = "088063e3-dd7a-4e19-b67b-ec910b3f8e3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49052eb5-e060-4a3f-8f01-68be33eee8b0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "PATIENT03",
                            PasswordHash = "AQAAAAEAACcQAAAAELKXdWiRIaaH0oI8Uqylfsc0gKhRODCRBYaM4Ds42YhIRGyFtx9fyTNGugJoxCjFTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0cddebdf-c997-42ef-a28a-c054bf51c34b",
                            TwoFactorEnabled = false,
                            UserName = "Patient03",
                            DataId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
